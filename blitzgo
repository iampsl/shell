#!/bin/bash
set -euo pipefail || { echo "set failed";exit 1;  }
success="no"
function onexit(){
	if [ "${success}" = "no" ];then
		echo "$0 fail"
	else
		echo "$0 success"
	fi
}
trap onexit EXIT

OLDIFS="$IFS"

function install(){
	echo -e "\r\n--------------------------------------------------------------------\r\n"
	echo "$1"
	unset installMap
	declare -A installMap
	IFS="${OLDIFS}"
	for arg in $1;do
		local keystr="${arg%%=*}"
		local valuestr="${arg#*=}"
		if [ -n "${keystr}" -a -n "${valuestr}" ];then
			installMap["${keystr}"]="${valuestr}"
		fi
	done
	local url="${installMap["blitz_url"]}"
	test -n "${url}" ||  { echo "blitz_url not found"; exit 1; }
	local name="${installMap["blitz_name"]}"
	test -n "${name}" || { echo "blitz_name not found"; exit 1; }
	local index="${installMap["blitz_index"]}"
	test -n "${index}" || { echo "blitz_index not found"; exit 1; }
	local zookeeper="${installMap["blitz_zookeeper"]}"
	test -n "${zookeeper}" || { echo "blitz_zookeeper not found"; exit 1; }
	local ver="${installMap["blitz_ver"]}"
	test -n "${ver}" || { echo "blitz_ver not found"; exit 1; }
	local tag="${installMap["blitz_tag"]}"
	test -n "${tag}" || { echo "blitz_tag not found"; exit 1; }
	local port="${installMap["ansible_port"]}"
	test -n "${port}" || { echo "ansible_port not found"; exit 1; }
	local user="${installMap["ansible_user"]}"
	test -n "${user}" || { echo "ansible_user not found"; exit 1; }
	local host="${installMap["ansible_host"]}"
	test -n "${host}" || { echo "ansible_host not found"; exit 1; }
	local dirname=$(uuidgen)
	ssh -o "StrictHostKeyChecking no" -p "${port}" "${user}"@"${host}" \
		"set -euo pipefail || exit 1;\
		sudo rm -r -f /tmp/${dirname} || true;\
		sudo mkdir -p /tmp/${dirname};\
		sudo echo "begin download ${url}";\
		sudo curl -o /tmp/${dirname}/archive.tar.gz  "${url}" || { sudo rm -r -f /tmp/${dirname}; exit 1; };\
		sudo echo "end download";\
		sudo chown root:root /tmp/${dirname}/archive.tar.gz;\
		sudo tar -x -z -f /tmp/${dirname}/archive.tar.gz -C /tmp/${dirname}/ || { sudo rm -r -f /tmp/${dirname};exit 1; };\
		sudo mv /tmp/${dirname}/go_mps* /tmp/${dirname}/go_mps;\
		echo "blitz_name=${name}" | sudo tee -a /tmp/${dirname}/go_mps/blitz.properties;\
		echo "blitz_index=${index}" | sudo tee -a /tmp/${dirname}/go_mps/blitz.properties;\
		echo "blitz_zookeeper=${zookeeper}" | sudo tee -a /tmp/${dirname}/go_mps/blitz.properties;\
		echo "blitz_ver=${ver}" | sudo tee -a /tmp/${dirname}/go_mps/blitz.properties;\
		echo "blitz_tag=${tag}" | sudo tee -a /tmp/${dirname}/go_mps/blitz.properties;\
		sudo mkdir -p /opt/blitz;\
		sudo rm -r -f /opt/blitz/go_mps*;\
		sudo mv /tmp/${dirname}/go_mps /opt/blitz/ || { sudo rm -r -f /tmp/${dirname};exit 1; };\
		sudo rm -r -f /tmp/${dirname};\
		sudo /bin/mv -f /opt/blitz/go_mps/libprotobuf.so.9 /lib64/;\
		sudo /bin/mv -f /opt/blitz/go_mps/go_mps.service /etc/systemd/system/mps.service;\
		sudo systemctl daemon-reload;\
		sudo systemctl enable mps;\
		sudo systemctl stop mps;\
		"
	echo -e "\r\nindex=${index}   host=${host}  install success"
}


function startService(){
	echo -e "\r\n--------------------------------------------------------------------\r\n"
	echo "$1"
	unset startMap
	declare -A startMap
	IFS="${OLDIFS}"
	for arg in $1;do
		local keystr="${arg%%=*}"
		local valuestr="${arg#*=}"
		if [ -n "${keystr}" -a -n "${valuestr}" ];then
			startMap["${keystr}"]="${valuestr}"
		fi
	done
	local index="${startMap["blitz_index"]}"
	test -n "${index}" || { echo "blitz_index not found"; exit 1; }
	local name="${startMap["blitz_name"]}"
	test -n "${name}" || { echo "blitz_name not found"; exit 1; }
	local port="${startMap["ansible_port"]}"
	test -n "${port}" || { echo "ansible_port not found"; exit 1; }
	local user="${startMap["ansible_user"]}"
	test -n "${user}" || { echo "ansible_user not found"; exit 1; }
	local host="${startMap["ansible_host"]}"
	test -n "${host}" || { echo "ansible_host not found"; exit 1; }
	ssh -o "StrictHostKeyChecking no" -p "${port}" "${user}"@"${host}" \
		"set -euo pipefail || exit 1;\
		sudo systemctl restart ${name};\
		"
	echo -e "\r\nindex=${index}   host=${host}  start success"
}

function stopService(){
	echo -e "\r\n--------------------------------------------------------------------\r\n"
	echo "$1"
	unset stopMap
	declare -A stopMap
	IFS="${OLDIFS}"
	for arg in $1;do
		local keystr="${arg%%=*}"
		local valuestr="${arg#*=}"
		if [ -n "${keystr}" -a -n "${valuestr}" ];then
			stopMap["${keystr}"]="${valuestr}"
		fi
	done
	local index="${stopMap["blitz_index"]}"
	test -n "${index}" || { echo "blitz_index not found"; exit 1; }
	local name="${stopMap["blitz_name"]}"
	test -n "${name}" || { echo "blitz_name not found"; exit 1; }
	local port="${stopMap["ansible_port"]}"
	test -n "${port}" || { echo "ansible_port not found"; exit 1; }
	local user="${stopMap["ansible_user"]}"
	test -n "${user}" || { echo "ansible_user not found"; exit 1; }
	local host="${stopMap["ansible_host"]}"
	test -n "${host}" || { echo "ansible_host not found"; exit 1; }
	ssh -o "StrictHostKeyChecking no" -p "${port}" "${user}"@"${host}" \
		"set -euo pipefail || exit 1;\
		sudo systemctl stop ${name};\
		"
	echo -e "\r\nindex=${index}   host=${host}  stop success"
}

function process(){
	unset processMap
	declare -A processMap
	IFS="${OLDIFS}"
	for arg in $1;do
		local keystr="${arg%%=*}"
		local valuestr="${arg#*=}"
		if [ -n "${keystr}" -a -n "${valuestr}" ];then
			processMap["${keystr}"]="${valuestr}"
		fi
	done
	local action="${processMap["blitz_action"]}"
	test -z "${action}" && { echo "blitz_action not found"; exit 1; }
	if [ "${action}" = "install" ];then
		install "$1"
	elif [ "${action}" = "service-start" ];then
		startService "$1"
	elif [ "${action}" = "service-stop" ];then
		stopService "$1"
	elif [ "${action}" = "service-restart" ];then
		startService "$1"
	else
		echo "unknown action:${action}"
		exit 1
	fi
}



function getValue(){
	unset getMap
	declare -A getMap
	IFS="${OLDIFS}"
	for arg in $1;do
		local keystr="${arg%%=*}"
		local valuestr="${arg#*=}"
		if [ -n "${keystr}" -a -n "${valuestr}" ];then
			getMap["${keystr}"]="${valuestr}"
		fi
	done
	echo ${getMap["${2}"]}
	return 0
}

###########################################
#检测输入
test $# -eq 5 || { echo "usage:$0 -i  file -l blitz file"; exit 1; }
test -f ${2} || { echo "${2} not exist"; exit 1; }
test -f ${5} || { echo "${5} not exist"; exit 1; }
cat ${2}
###########################################
secondLine=$(sed -n '2p' ${2} | tr -d '\r' | tr -d '\n')
blitzAction=$(getValue "$secondLine" "blitz_action")
test -n "$blitzAction"
#非安装动作
if [ "$blitzAction" != "install" ];then
	arguments=$(sed 1d ${2})
	IFS=$'\n'
	for arg in $arguments;do
		arg="$(echo $arg | tr -d '\r' | tr -d '\n' | xargs)"
		if [ -n "$arg" ];then
			process "$arg"
		fi		
	done
	success="yes"
	exit 0
fi
blitzType=$(getValue "$secondLine" "blitz_type")
test -n "$blitzType"
blitzName=$(getValue "$secondLine" "blitz_name")
test -n "$blitzName"

#查看安装类型和服务器名是否一样
if [[ ! $blitzType =~ "$blitzName" ]];then
	echo "install type not same"
	exit 1
fi

#安装非go版的服务
if [[ ! $blitzType =~ "go" ]];then
	ansible-playbook ${1} ${2} ${3} ${4} ${5}
	success="yes"
	exit 0
fi

#安装go版的服务
arguments=$(sed 1d ${2})
IFS=$'\n'
for arg in $arguments;do
	arg="$(echo $arg | tr -d '\r' | tr -d '\n' | xargs)"
	arg=$(echo $arg | sed "s:/${blitzName}/repository/archive.tar.gz:/go_${blitzName}/repository/archive.tar.gz:g")
	if [ -n "$arg" ];then
		process "$arg"
	fi		
done
success="yes"
exit 0




